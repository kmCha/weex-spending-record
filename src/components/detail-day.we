<template>
  <div class="day-wrap" if="hasDetails">
    <div class="day-box {{color}}">
      <text class="day-text">{{day.date}}</text>
      <div class="detail-box">
        <text class="detail-text">{{dailySummary}}</text>
      </div>
    </div>
    <detail-item repeat="{{detail in day.details}}" track-by="detail._id" detail="{{detail}}" index="{{$index}}"></detail-item>
  </div>
</template>

<style>
  .day-wrap {
    display: flex;
    justify-content: center;
    align-items: center;
  }
  .day-box {
    margin-top: 30;
    position: relative;
    width: 55;
    height: 55;
    background-color: #45b791;
    border-radius: 55;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  .red {
    background-color: #b74545;
  }
  .green {
    background-color: #45b791;
  }
  .day-text {
    color: white;
    font-weight: bold;
  }
  .detail-box {
    position: absolute;
    left: 65;
    top: 0;
    height: 55;
    width: 500;
    display: flex;
    justify-content: center;
  }
  .detail-text {
    font-size: 25;
  }
</style>

<script>
  module.exports = {
    data: function() {
      return {
        day: {},
        index: 0
      };
    },
    computed: {
      totalAmount: function() {
        var details = this.day.details;
        // 防止下面reduce函数不执行从而返回初始对象而不是总金额
        if (details.length === 0) details = [{"income":false, "amount":0, "desc": ""}];
        var initialDetail = {"income":false, "amount":0, "desc": ""}
        var totalAmount = details.reduce(function(prev, curr) {
          var prevAmount = prev.amount == undefined ? prev : prev.amount;
          var currAmount = curr.amount == undefined ? curr : curr.amount;
          if (prev.income || prev.income == 'true') prevAmount = -prevAmount;
          if (curr.income || curr.income == 'true') currAmount = -currAmount;
          return currAmount + prevAmount;
        }, initialDetail);
        return totalAmount;
      },
      dailySummary: function() {
        var totalAmount = this.totalAmount;
        if (totalAmount < 0) {
          return '收入：' + -totalAmount.toFixed(2) + '元';
        }
        return '支出：' + totalAmount.toFixed(2) + '元';
      },
      color: function() {
        var totalAmount = this.totalAmount;
        if (totalAmount < 0) {
          return 'green';
        }
        return 'red';
      },
      hasDetails: function() {
        return this.day.details.length ? true : false;
      }
    },
    created: function() {
      this.$on('deleteItem', function(e) {
        this.day.details.splice(e.detail.index, 1);
        if (this.day.details.length == 0) {
          this.$dispatch('deleteDay', {index: this.index});
        }
      });
      this.$on('editItem-index', function(e) {
        this.$dispatch('editItem-day', {
          date: this.day.date,
          detail: this.day.details[e.detail.index]
        })
      })
    }
  }
</script>
