<template>
  <container>
    <div class="day-box {{color}}" style="background-color: {{categoryColor}};" onclick="clickDayBox">
      <img src="{{baseUrl}}img/{{detail.category}}.png" style="width:35;height:35;"></img>
      <div class="detail-box {{position}}">
        <text class="detail-text">{{category}} {{amount}}元</text>
      </div>
      <div class="desc-box {{position}}">
        <text class="desc-text">{{detail.desc}}</text>
      </div>
      <div id="delete" class="delete-box" onclick="handleDelete">
        <img src="{{baseUrl}}img/delete.png" style="width:45;height:45;"></img>
      </div>
      <div id="edit" class="edit-box" onclick="handleEdit">
        <img src="{{baseUrl}}img/edit.png" style="width:30;height:30;"></img>
      </div>
    </div>
  </container>
</template>

<style>
  .day-box {
    margin-top: 30;
    position: relative;
    width: 55;
    height: 55;
    border-radius: 55;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #aaa;
  }
  .detail-box {
    position: absolute;
    top: 0;
    height: 55;
    width: 230;
    display: flex;
    justify-content: center;
  }
  .right {
    left: 65;
    align-items: flex-start;
  }
  .left {
    right: 65;
    align-items: flex-end;
  }
  .detail-text {
    font-size: 25;
  }
  .desc-box {
    position: absolute;
    width: 200;
    bottom: -15;
  }
  .desc-text {
    font-size: 20;
    color: #555;
  }
  .delete-box {
    width: 55;
    height: 55;
    position: absolute;
    top: 0;
    right: 0;
    border-radius: 55;
    justify-content: center;
    align-items: center;
    background-color: #aaa;
    opacity: 0;
  }
  .edit-box {
    width: 55;
    height: 55;
    position: absolute;
    top: 0;
    left: 0;
    border-radius: 55;
    justify-content: center;
    align-items: center;
    background-color: #aaa;
    opacity: 0;
  }
</style>

<script>
  // var this.store = require('../vuex/this.store.js');
  var getCategoryCN = require('../lib/getCategoryProperties.js').getCategoryCN;
  var getCategoryColor = require('../lib/getCategoryProperties.js').getCategoryColor;
  var animation = require('@weex-module/animation');
  module.exports = {
    data: function() {
      return {
        detail: {},
        detailIndex: 0,
        dateIndex: 0,
        monthIndex: 0,
        optionsShow: false,
        baseUrl: '',
        // state: this.store.state
      }
    },
    methods: {
      handleDelete: function() {
        if (this.optionsShow) {
          this.deleteItem();
        } else {
          this.clickDayBox();
        }
      },
      deleteItem: function() {
        // console.log('delete')
        // this.$dispatch('deleteItem', {index: this.detailIndex});
        this.store.dispatch('delete', {
          monthIndex: this.monthIndex,
          dateIndex: this.dateIndex,
          detailIndex: this.detailIndex
        });
      },
      handleEdit: function() {
        if (this.optionsShow) {
          this.editItem();
        } else {
          this.clickDayBox();
        }
      },
      editItem: function() {
        console.log('edit')
        this.store.commit('setSelectedType', this.detail.income ? 'income' : 'spending');
        this.store.commit('selectCategory', this.detail.category);
        this.store.commit('setAmount', this.detail.amount);
        this.$dispatch('editItem');
      },
      clickDayBox: function() {
        var monthIndex = this.store.state.monthIndex;
        var dateIndex = this.store.state.dateIndex;
        var detailIndex = this.store.state.detailIndex;
        if (monthIndex < 0 || dateIndex < 0 || detailIndex < 0) { // 无option已打开
          this.store.commit('select', {
            monthIndex: this.monthIndex,
            dateIndex: this.dateIndex,
            detailIndex: this.detailIndex
          });
          this.openOptions();
        } else if (monthIndex === this.monthIndex && dateIndex === this.dateIndex && detailIndex === this.detailIndex) {  // 本option已打开
          this.closeOptions();
          this.store.commit('unselect');
        } else {              // 其他option已打开
          this.$dispatch('closeOptions');
        }
      },
      openOptions: function() {
        this.optionsShow = true;
        var self = this;
        var deleteElem = this.$el('delete');
        var editElem = this.$el('edit');
        animation.transition(deleteElem, {
          styles: {
            opacity: 1,
            transform: 'translate(-300px, 0)'
          },
          duration: 200,
          timingFunction: 'linear',
        }, function() {
          // console.log(deleteElem.style, self.$el('shadow'))
        });
        animation.transition(editElem, {
          styles: {
            opacity: 1,
            transform: 'translate(300px, 0)'
          },
          duration: 200,
          timingFunction: 'linear',
        }, function() {
          // console.log('animation finished')
        })
      },
      closeOptions: function() {
        var deleteElem = this.$el('delete');
        var editElem = this.$el('edit');
        var self = this;
        animation.transition(deleteElem, {
          styles: {
            opacity: 0,
            transform: 'translate(0, 0)'
          },
          duration: 200,
          timingFunction: 'linear',
        }, function() {
          // console.log(deleteElem.style)
          self.optionsShow = false;
        });
        animation.transition(editElem, {
          styles: {
            opacity: 0,
            transform: 'translate(0, 0)'
          },
          duration: 200,
          timingFunction: 'linear',
        }, function() {
          self.optionsShow = false;
        });
        this.store.commit('unselect');
      }
    },
    computed: {
      // detail: {
      //   get: function() {
      //     return this.store.state.detail.months[this.monthIndex].dates[this.dateIndex].details[this.detailIndex];
      //   }
      // },
      category: function() {
        return getCategoryCN(this.store.state.categories, this.detail.category, this.detail.income ? 'income' : 'spending');
      },
      categoryColor: function() {
        return getCategoryColor(this.store.state.categories, this.detail.category, this.detail.income ? 'income' : 'spending');
      },
      position: function() {
        return this.detail.income ? 'left' : 'right';
      },
      color: function() {
        return this.detail.income? 'green' : 'red';
      },
      amount: function() {
        return this.detail.amount.toFixed(2);
      }
    },
    created: function() {
      this.baseUrl = this.store.state.baseUrl;
    }
  }
</script>
